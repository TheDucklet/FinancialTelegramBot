import sqlite3
import requests
import io
import numpy as np
import time, math
from datetime import datetime, timedelta
import matplotlib

matplotlib.use('Agg')
import matplotlib.pyplot as plt

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)

# –°–ª–æ–≤–∞—Ä–∏ –≤–∞–ª—é—Ç
fiat_info = {
    "USD": "US Dollar", "EUR": "Euro", "JPY": "Japanese Yen", "GBP": "British Pound",
    "AUD": "Australian Dollar", "CAD": "Canadian Dollar", "CHF": "Swiss Franc",
    "CNY": "Chinese Yuan", "SEK": "Swedish Krona", "NZD": "New Zealand Dollar",
    "MXN": "Mexican Peso", "SGD": "Singapore Dollar", "HKD": "Hong Kong Dollar",
    "NOK": "Norwegian Krone", "KRW": "South Korean Won", "TRY": "Turkish Lira",
    "INR": "Indian Rupee", "RUB": "Russian Ruble", "BRL": "Brazilian Real",
    "ZAR": "South African Rand", "DKK": "Danish Krone", "PLN": "Polish Zloty",
    "THB": "Thai Baht", "IDR": "Indonesian Rupiah", "HUF": "Hungarian Forint"
}

crypto_info = {
    "BTC": "Bitcoin", "ETH": "Ethereum", "USDT": "Tether", "BNB": "Binance Coin",
    "XRP": "XRP", "ADA": "Cardano", "DOGE": "Dogecoin", "SOL": "Solana",
    "DOT": "Polkadot", "MATIC": "Polygon", "LTC": "Litecoin", "SHIB": "Shiba Inu",
    "TRX": "TRON", "AVAX": "Avalanche", "UNI": "Uniswap", "LINK": "Chainlink",
    "ATOM": "Cosmos", "ALGO": "Algorand", "XLM": "Stellar", "FTT": "FTX Token",
    "NEAR": "NEAR Protocol", "VET": "VeChain", "ICP": "Internet Computer",
    "MANA": "Decentraland", "EOS": "EOS", "AXS": "Axie Infinity"
}

# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏
# Gate.io: https://api.gateio.ws/api/v4/spot/tickers?currency_pair=BTC_USDT
# ByBit: https://api.bybit.com/spot/v1/ticker/24hr?symbol=BTCUSDT

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_messages = {}  # {chat_id: [message_id, ...]}
session = requests.Session()

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ (60 —Å–µ–∫)
_cached_cbr_data = None
_cached_cbr_timestamp = 0


def get_cbr_data():
    global _cached_cbr_data, _cached_cbr_timestamp
    now = time.time()
    if _cached_cbr_data is None or now - _cached_cbr_timestamp > 60:
        _cached_cbr_data = session.get(CBR_API_URL, timeout=3).json()
        _cached_cbr_timestamp = now
    return _cached_cbr_data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
def ensure_column_exists(table: str, column: str, definition: str):
    with sqlite3.connect('subscriptions.db') as conn:
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table})")
        cols = [info[1] for info in cursor.fetchall()]
        if column not in cols:
            cursor.execute(f"ALTER TABLE {table} ADD COLUMN {column} {definition}")
            conn.commit()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with sqlite3.connect('subscriptions.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER,
                pair TEXT,
                threshold REAL DEFAULT NULL,
                PRIMARY KEY (user_id, pair)
            )
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                notifications BOOLEAN DEFAULT 1,
                default_currency TEXT DEFAULT 'USD'
            )
        ''')
    ensure_column_exists("user_settings", "data_source", "TEXT DEFAULT 'BINANCE'")


init_db()


# –†–∞–±–æ—Ç–∞ —Å –ë–î
def db_execute(query, params=()):
    with sqlite3.connect('subscriptions.db') as conn:
        conn.execute(query, params)
        conn.commit()


def db_fetchall(query, params=()):
    with sqlite3.connect('subscriptions.db') as conn:
        return conn.execute(query, params).fetchall()


# –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_user_settings(user_id):
    settings = db_fetchall('SELECT notifications, default_currency, data_source FROM user_settings WHERE user_id = ?',
                           (user_id,))
    return {
        "notifications": bool(settings[0][0]),
        "default_currency": settings[0][1],
        "data_source": settings[0][2]
    } if settings else {"notifications": True, "default_currency": "USD", "data_source": "BINANCE"}


def save_user_settings(user_id, settings):
    db_execute('''
        INSERT OR REPLACE INTO user_settings (user_id, notifications, default_currency, data_source)
        VALUES (?, ?, ?, ?)
    ''', (user_id, settings['notifications'], settings['default_currency'], settings['data_source']))


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = 'YOUR_BOT_TOCKEN'
BINANCE_API_URL = 'https://api.binance.com/api/v3/ticker/price'
CBR_API_URL = 'https://www.cbr-xml-daily.ru/daily_json.js'

KEYBOARD = [
    ['üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä'],
    ['üí∞ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã', 'üíµ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'],
    ['üìä –ü–æ–¥–ø–∏—Å–∫–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
    ['‚ùì –ü–æ–º–æ—â—å', 'üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç']
]


# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
def get_reply_target(update: Update):
    return update.message or (update.callback_query.message if update.callback_query else None)


async def tracked_reply(update: Update, text: str, **kwargs):
    target = get_reply_target(update)
    if target:
        msg = await target.reply_text(text, **kwargs)
        bot_messages.setdefault(target.chat.id, []).append(msg.message_id)
        return msg
    print("No target for reply")


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç —Å —É—á—ë—Ç–æ–º Nominal (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¶–ë)
def convert_fiat_value(value: float, from_cur: str, to_cur: str) -> float:
    data = get_cbr_data()

    def get_rate(cur):
        return 1.0 if cur == "RUB" else data['Valute'][cur]['Value'] / data['Valute'][cur]['Nominal']

    rub_value = value * get_rate(from_cur)
    return rub_value if to_cur == "RUB" else rub_value / get_rate(to_cur)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
def get_crypto_price_api(crypto: str, source: str) -> float:
    if source == "BINANCE":
        resp = session.get(f"{BINANCE_API_URL}?symbol={crypto}USDT", timeout=3)
        data = resp.json()
        if 'price' not in data:
            raise Exception("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return float(data['price'])
    elif source == "GATEIO":
        url = f"https://api.gateio.ws/api/v4/spot/tickers?currency_pair={crypto}_USDT"
        resp = session.get(url, timeout=3)
        data = resp.json()
        if not data:
            raise Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å Gate.io")
        return float(data[0]['last'])
    elif source == "BYBIT":
        if crypto == "SHIB":
            raise Exception("ByBit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SHIB")
        url = f"https://api.bybit.com/spot/v1/ticker/24hr?symbol={crypto}USDT"
        resp = session.get(url, timeout=3)
        data = resp.json()
        if data.get("ret_code", -1) != 0:
            raise Exception("–û—à–∏–±–∫–∞ –æ—Ç ByBit")
        return float(data["result"]["lastPrice"])
    else:
        raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
async def convert_crypto_command(update: Update, context: ContextTypes.DEFAULT_TYPE, crypto: str, target_currency: str):
    settings = load_user_settings(update.effective_user.id)
    source = settings.get("data_source", "BINANCE")
    try:
        usd_price = get_crypto_price_api(crypto, source)
        price = usd_price if target_currency == "USD" else convert_fiat_value(usd_price, "USD", target_currency)
        price_str = f"{price:,.8f}" if price < 0.01 else f"{price:,.2f}"
        await tracked_reply(update,
                            f"ü™ô {crypto}\n–¶–µ–Ω–∞: {price_str} {target_currency}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
                            parse_mode="HTML")
    except Exception as e:
        await tracked_reply(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
async def convert_fiat_command(update: Update, context: ContextTypes.DEFAULT_TYPE, from_cur: str, to_cur: str):
    try:
        rate = convert_fiat_value(1, from_cur, to_cur)
        await tracked_reply(update,
                            f"üíµ {from_cur} ‚Üí {to_cur}\n–ö—É—Ä—Å: 1 {from_cur} = {rate:,.2f} {to_cur}\n–ò—Å—Ç–æ—á–Ω–∏–∫: –¶–ë –†–§",
                            parse_mode="HTML")
    except Exception as e:
        await tracked_reply(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /convert
async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 1:
        return await tracked_reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /convert <–ö–æ–¥> [–¶–µ–ª–µ–≤–∞—è]")
    from_code = args[0].upper()
    to_code = args[1].upper() if len(args) > 1 else load_user_settings(update.effective_user.id).get("default_currency",
                                                                                                     "USD")
    if from_code in crypto_info:
        await convert_crypto_command(update, context, from_code, to_code)
    elif from_code in fiat_info:
        await convert_fiat_command(update, context, from_code, to_code)
    else:
        await tracked_reply(update, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: {from_code}")


# Inline-–º–µ–Ω—é –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç
async def crypto_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inline_kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("BTC", callback_data="crypto_BTC"),
         InlineKeyboardButton("ETH", callback_data="crypto_ETH"),
         InlineKeyboardButton("DOGE", callback_data="crypto_DOGE")]
    ])
    await tracked_reply(update, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=inline_kb)


async def fiat_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inline_kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("USD", callback_data="fiat_USD"),
         InlineKeyboardButton("EUR", callback_data="fiat_EUR"),
         InlineKeyboardButton("RUB", callback_data="fiat_RUB"),
         InlineKeyboardButton("GBP", callback_data="fiat_GBP")]
    ])
    await tracked_reply(update, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=inline_kb)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –±–∏—Ä–∂–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É—è Binance exchangeInfo)
async def list_available_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = session.get("https://api.binance.com/api/v3/exchangeInfo", timeout=5)
        data = resp.json()
        symbols = data.get("symbols", [])
        crypto_set = set()
        for sym in symbols:
            # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT
            if sym.get("quoteAsset") == "USDT":
                crypto_set.add(sym.get("baseAsset"))
        crypto_list = sorted(list(crypto_set))
        text = "üíπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ (–ø–∞—Ä—ã —Å USDT):</b>\n\n"
        for c in crypto_list:
            name = crypto_info.get(c, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += f"‚Ä¢ {c} ‚Äî {name}\n"
        await tracked_reply(update, text, parse_mode="HTML")
    except Exception as e:
        await tracked_reply(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã (–∏–∑ –Ω–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è)
async def list_available_fiat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üíπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n\n"
    for code, name in sorted(fiat_info.items()):
        text += f"‚Ä¢ {code} ‚Äî {name}\n"
    await tracked_reply(update, text, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ü–µ–Ω—ã –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏
async def compare_crypto_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        crypto = context.args[0].upper()
    except:
        return await tracked_reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compare <–ö–æ–¥> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /compare BTC)", parse_mode="HTML")
    results = {}
    sources = ["BINANCE", "GATEIO", "BYBIT"]
    for source in sources:
        try:
            price = get_crypto_price_api(crypto, source)
            results[source] = price
        except Exception as e:
            results[source] = None
    text = f"üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {crypto}:</b>\n\n"
    valid_prices = {}
    for source, price in results.items():
        if price is not None:
            valid_prices[source] = price
            text += f"‚Ä¢ {source}: {price:,.2f} USD\n"
        else:
            text += f"‚Ä¢ {source}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    if valid_prices:
        max_price = max(valid_prices.values())
        min_price = min(valid_prices.values())
        diff = max_price - min_price
        pct = (diff / min_price * 100) if min_price != 0 else 0
        text += f"\n–†–∞–∑–Ω–∏—Ü–∞: {diff:,.2f} USD ({pct:+.2f}%)"
    else:
        text += "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
    await tracked_reply(update, text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /check
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        code = context.args[0].upper()
        if code in fiat_info:
            info = f"üíµ {code}: {fiat_info[code]}"
        elif code in crypto_info:
            info = f"ü™ô {code}: {crypto_info[code]}"
        else:
            info = f"‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∞ {code}"
    except:
        info = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check <–ö–æ–¥> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /check USD)"
    await tracked_reply(update, info, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /trend ‚Äì –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (m, h, d, mo, y)
async def trend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        code = context.args[0].upper()
    except:
        return await tracked_reply(update,
                                   "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trend <–ö–æ–¥> [–ü–µ—Ä–∏–æ–¥] (–Ω–∞–ø—Ä–∏–º–µ—Ä, /trend BTC 24h –∏–ª–∏ /trend EUR 1y)",
                                   parse_mode="HTML")
    if len(context.args) > 1:
        period_arg = context.args[1]
        num_part = ''.join(filter(str.isdigit, period_arg))
        unit_part = ''.join(filter(str.isalpha, period_arg)).lower()
        period_value = int(num_part) if num_part else 0
        if unit_part in {"m", "min"}:
            time_unit = "minutes"
        elif unit_part == "h":
            time_unit = "hours"
        elif unit_part == "d":
            time_unit = "days"
        elif unit_part in {"mo", "month", "months"}:
            time_unit = "months"
        elif unit_part in {"y", "year", "years"}:
            time_unit = "years"
        else:
            time_unit = "days"
    else:
        if code in crypto_info:
            period_value, time_unit = 24, "hours"
        elif code in fiat_info:
            period_value, time_unit = 30, "days"
        else:
            return await tracked_reply(update, f"‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∞ {code}", parse_mode="HTML")
    processing_msg = await tracked_reply(update,
                                         f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {code} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_value} {time_unit}...",
                                         parse_mode="HTML")
    if code in crypto_info:
        settings = load_user_settings(update.effective_user.id)
        source = settings.get("data_source", "BINANCE")
        if source == "BINANCE":
            if time_unit in {"minutes", "hours"} and ((time_unit == "minutes" and period_value < 60 * 48) or (
                    time_unit == "hours" and period_value < 48)):
                interval = "1m" if time_unit == "minutes" else "1h"
                limit = period_value
            else:
                interval = "1d"
                if time_unit == "days":
                    limit = period_value
                elif time_unit == "months":
                    limit = period_value * 30
                elif time_unit == "years":
                    limit = period_value * 365
                else:
                    limit = period_value
            url = f"https://api.binance.com/api/v3/klines?symbol={code}USDT&interval={interval}&limit={limit}"
            data = session.get(url, timeout=5).json()
            if not data or not isinstance(data, list):
                return await processing_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", parse_mode="HTML")
            date_format = '%H:%M' if interval in {"1m", "1h"} else '%d-%m'
            dates = [datetime.fromtimestamp(entry[0] / 1000).strftime(date_format) for entry in data]
            prices = [float(entry[4]) for entry in data]
        elif source in {"GATEIO", "BYBIT"}:
            interval = "1d"
            if time_unit in {"days", "months", "years"}:
                if time_unit == "days":
                    limit = period_value
                elif time_unit == "months":
                    limit = period_value * 30
                elif time_unit == "years":
                    limit = period_value * 365
                else:
                    limit = period_value
            else:
                limit = 24
            url = f"https://api.binance.com/api/v3/klines?symbol={code}USDT&interval={interval}&limit={limit}"
            data = session.get(url, timeout=5).json()
            dates = [datetime.fromtimestamp(entry[0] / 1000).strftime('%d-%m') for entry in data]
            prices = [float(entry[4]) for entry in data]
        pct_change = ((prices[-1] - prices[0]) / prices[0]) * 100
        caption = f"üìà {code} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_value} {time_unit}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {pct_change:+.2f}%\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    elif code in fiat_info:
        if time_unit in {"minutes", "hours"}:
            days = 1
        elif time_unit == "days":
            days = period_value
        elif time_unit == "months":
            days = period_value * 30
        elif time_unit == "years":
            days = period_value * 365
        else:
            days = period_value
        end_date = datetime.today()
        start_date = end_date - timedelta(days=days - 1)
        start_str = start_date.strftime('%Y-%m-%d')
        end_str = end_date.strftime('%Y-%m-%d')
        default = load_user_settings(update.effective_user.id)['default_currency']
        url = f"https://api.exchangerate.host/timeseries?start_date={start_str}&end_date={end_str}&base={code}&symbols={default}"
        data_json = session.get(url, timeout=5).json()
        rates = data_json.get("rates", {})
        if not rates:
            return await processing_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", parse_mode="HTML")
        sorted_dates = sorted(rates.keys())
        dates = [datetime.strptime(d, '%Y-%m-%d').strftime('%d-%m') for d in sorted_dates]
        prices = [rates[d][default] for d in sorted_dates]
        pct_change = ((prices[-1] - prices[0]) / prices[0]) * 100
        caption = f"üìà {code} ‚Üí {default} –∑–∞ {days} –¥–Ω.\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {pct_change:+.2f}%\n–ò—Å—Ç–æ—á–Ω–∏–∫: exchangerate.host"
    else:
        return await processing_msg.edit_text(f"‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∞ {code}", parse_mode="HTML")
    x = np.arange(len(prices))
    slope, intercept = np.polyfit(x, prices, 1)
    trend_line = slope * x + intercept
    plt.figure(figsize=(10, 6))
    plt.plot(x, prices, marker='o', linestyle='-', color='blue', label='–¶–µ–Ω–∞')
    plt.plot(x, trend_line, color='red', linestyle='--', linewidth=2, label='–¢—Ä–µ–Ω–¥')
    plt.plot(x[-1], trend_line[-1], 'ro', markersize=5)
    plt.title(f"{code} ‚Äì —Ç—Ä–µ–Ω–¥")
    plt.xlabel("–í—Ä–µ–º—è")
    ylabel = "–¶–µ–Ω–∞ (USDT)" if code in crypto_info else f"–¶–µ–Ω–∞ ({default})"
    plt.ylabel(ylabel)
    plt.legend()
    plt.grid(True)
    if len(x) > 12:
        indices = np.linspace(0, len(x) - 1, num=12, dtype=int)
        plt.xticks(indices, [dates[i] for i in indices], rotation=45)
    else:
        plt.xticks(x, dates, rotation=45)
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    try:
        await processing_msg.edit_media(media=InputMediaPhoto(media=buf, caption=caption, parse_mode="HTML"))
    except Exception as e:
        target = get_reply_target(update)
        if target:
            await target.reply_photo(photo=buf, caption=caption, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /listcrypto ‚Äì –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (–∏–∑ Binance exchangeInfo)
async def list_available_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = session.get("https://api.binance.com/api/v3/exchangeInfo", timeout=5)
        data = resp.json()
        symbols = data.get("symbols", [])
        crypto_set = set()
        for sym in symbols:
            if sym.get("quoteAsset") == "USDT":
                crypto_set.add(sym.get("baseAsset"))
        crypto_list = sorted(list(crypto_set))
        text = "üíπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–ø–∞—Ä—ã —Å USDT):</b>\n\n"
        for c in crypto_list:
            name = crypto_info.get(c, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += f"‚Ä¢ {c} ‚Äî {name}\n"
        await tracked_reply(update, text, parse_mode="HTML")
    except Exception as e:
        await tracked_reply(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /listfiat ‚Äì –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
async def list_available_fiat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üíπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n\n"
    for code, name in sorted(fiat_info.items()):
        text += f"‚Ä¢ {code} ‚Äî {name}\n"
    await tracked_reply(update, text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /compare ‚Äì –≤—ã–≤–æ–¥ —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏
async def compare_crypto_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        crypto = context.args[0].upper()
    except:
        return await tracked_reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compare <–ö–æ–¥> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /compare BTC)", parse_mode="HTML")
    results = {}
    sources = ["BINANCE", "GATEIO", "BYBIT"]
    for source in sources:
        try:
            price = get_crypto_price_api(crypto, source)
            results[source] = price
        except Exception as e:
            results[source] = None
    text = f"üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {crypto}:</b>\n\n"
    valid_prices = {}
    for source, price in results.items():
        if price is not None:
            valid_prices[source] = price
            text += f"‚Ä¢ {source}: {price:,.2f} USD\n"
        else:
            text += f"‚Ä¢ {source}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    if valid_prices:
        max_price = max(valid_prices.values())
        min_price = min(valid_prices.values())
        diff = max_price - min_price
        pct = (diff / min_price * 100) if min_price != 0 else 0
        text += f"\n–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π: {diff:,.2f} USD ({pct:+.2f}%)"
    else:
        text += "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
    await tracked_reply(update, text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ—á–∏–µ
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        pair = context.args[0].upper()
        db_execute('INSERT OR IGNORE INTO subscriptions (user_id, pair) VALUES (?, ?)',
                   (update.effective_user.id, pair))
        await tracked_reply(update, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞", parse_mode="HTML")
    except:
        await tracked_reply(update, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /subscribe <–ü–∞—Ä–∞>")


async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subs = db_fetchall('SELECT pair FROM subscriptions WHERE user_id = ?', (update.effective_user.id,))
    text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join([f"‚Ä¢ {s[0]}" for s in subs]) if subs else "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
    await tracked_reply(update, text)


async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in bot_messages:
        for msg_id in bot_messages[chat_id]:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except:
                pass
        bot_messages[chat_id] = []
    await tracked_reply(update, "üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    if data.startswith("crypto_"):
        await convert_crypto_command(update, context, data.split("_")[1],
                                     load_user_settings(user_id)["default_currency"])
    elif data.startswith("fiat_"):
        await convert_fiat_command(update, context, data.split("_")[1])
    elif data == "toggle_notifications":
        settings = load_user_settings(user_id)
        settings["notifications"] = not settings["notifications"]
        save_user_settings(user_id, settings)
        status = "–í–ö–õ" if settings["notifications"] else "–í–´–ö–õ"
        await query.edit_message_text(f"‚öôÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}")
    elif data == "change_default_currency":
        inline_kb = InlineKeyboardMarkup([[
            InlineKeyboardButton(c, callback_data=f"set_default_{c}") for c in ["USD", "EUR", "RUB", "GBP"]
        ]])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", reply_markup=inline_kb)
    elif data.startswith("set_default_"):
        new_currency = data.split("_")[2]
        settings = load_user_settings(user_id)
        settings["default_currency"] = new_currency
        save_user_settings(user_id, settings)
        await query.edit_message_text(f"‚úÖ –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {new_currency}")
    elif data == "change_data_source":
        inline_kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("BINANCE", callback_data="set_source_BINANCE"),
            InlineKeyboardButton("GATEIO", callback_data="set_source_GATEIO"),
            InlineKeyboardButton("BYBIT", callback_data="set_source_BYBIT")
        ]])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:", reply_markup=inline_kb)
    elif data.startswith("set_source_"):
        new_source = data.split("_")[2]
        settings = load_user_settings(user_id)
        settings["data_source"] = new_source
        save_user_settings(user_id, settings)
        await query.edit_message_text(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {new_source}")
    elif data in ["show_rates_fiat", "show_rates_crypto"]:
        if "fiat" in data:
            await handle_show_rates_fiat(update, context)
        else:
            await handle_show_rates_crypto(update, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", parse_mode="HTML")


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper()
    if text in fiat_info or text in crypto_info:
        if text in crypto_info:
            await convert_crypto_command(update, context, text,
                                         load_user_settings(update.effective_user.id)["default_currency"])
        else:
            await convert_fiat_command(update, context, text)
    elif text == 'üîÑ –ö–û–ù–í–ï–†–¢–ï–†':
        await tracked_reply(update, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n–ü—Ä–∏–º–µ—Ä: BTC –∏–ª–∏ USD")
    elif text == 'üí∞ –ü–û–ü–£–õ–Ø–†–ù–´–ï –í–ê–õ–Æ–¢–´':
        await popular_currencies_initial(update, context)
    elif text == 'üíµ –ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´':
        await popular_cryptocurrencies_initial(update, context)
    elif text == '‚ùì –ü–û–ú–û–©–¨':
        await help_command(update, context)
    elif text == '‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò':
        await settings_command(update, context)
    elif text == 'üìä –ü–û–î–ü–ò–°–ö–ò':
        await show_subscriptions(update, context)
    elif text == 'üóë –û–ß–ò–°–¢–ò–¢–¨ –ß–ê–¢':
        await clear_history(update, context)
    elif text == '/LISTCRYPTO':
        await list_available_crypto(update, context)
    elif text == '/LISTFIAT':
        await list_available_fiat(update, context)
    elif text.startswith('/COMPARE'):
        await compare_crypto_prices(update, context)
    else:
        await tracked_reply(update, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help", parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await tracked_reply(update,
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                        reply_markup=ReplyKeyboardMarkup(KEYBOARD, resize_keyboard=True))


# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äì –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /convert <code>–ö–æ–¥</code> [<code>–¶–µ–ª–µ–≤–∞—è</code>] ‚Äì –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
‚Ä¢ /subscribe <code>–ü–∞—Ä–∞</code> ‚Äì –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /subscriptions ‚Äì –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ /trend <code>–ö–æ–¥</code> [<code>–ü–µ—Ä–∏–æ–¥</code>] ‚Äì –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ 
      (–ü–µ—Ä–∏–æ–¥ –∑–∞–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –µ–¥–∏–Ω–∏—Ü–µ–π: m ‚Äì –º–∏–Ω—É—Ç—ã, h ‚Äì —á–∞—Å—ã, d ‚Äì –¥–Ω–∏, mo ‚Äì –º–µ—Å—è—Ü—ã, y ‚Äì –≥–æ–¥—ã)
‚Ä¢ /check <code>–ö–æ–¥</code> ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–µ
‚Ä¢ /listcrypto ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –±–∏—Ä–∂–µ
‚Ä¢ /listfiat ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
‚Ä¢ /compare <code>–ö–æ–¥</code> ‚Äì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ /settings ‚Äì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö)
‚Ä¢ /clear ‚Äì –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ /convert BTC
‚Ä¢ /convert BTC RUB
‚Ä¢ /subscribe BTCUSDT
‚Ä¢ /trend ETH 48h
‚Ä¢ /trend EUR 1y
‚Ä¢ /check USD
‚Ä¢ /listcrypto
‚Ä¢ /listfiat
‚Ä¢ /compare BTC
    """
    await tracked_reply(update, help_text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /settings ‚Äì –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤–∞–ª—é—Ç—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    settings = load_user_settings(update.effective_user.id)
    status = "–í–ö–õ" if settings["notifications"] else "–í–´–ö–õ"
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}\n"
            f"–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings['default_currency']}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {settings.get('data_source', 'BINANCE')}")
    inline_kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="toggle_notifications")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="change_default_currency")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", callback_data="change_data_source")]
    ])
    await tracked_reply(update, text, reply_markup=inline_kb, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        pair = context.args[0].upper()
        db_execute('INSERT OR IGNORE INTO subscriptions (user_id, pair) VALUES (?, ?)',
                   (update.effective_user.id, pair))
        await tracked_reply(update, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞", parse_mode="HTML")
    except:
        await tracked_reply(update, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /subscribe <–ü–∞—Ä–∞>")


# –ö–æ–º–∞–Ω–¥–∞ /subscriptions
async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subs = db_fetchall('SELECT pair FROM subscriptions WHERE user_id = ?', (update.effective_user.id,))
    text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join([f"‚Ä¢ {s[0]}" for s in subs]) if subs else "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
    await tracked_reply(update, text)


# –ö–æ–º–∞–Ω–¥–∞ /clear
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in bot_messages:
        for msg_id in bot_messages[chat_id]:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except:
                pass
        bot_messages[chat_id] = []
    await tracked_reply(update, "üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


# –ö–æ–º–∞–Ω–¥–∞ /listcrypto ‚Äì –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
async def list_available_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = session.get("https://api.binance.com/api/v3/exchangeInfo", timeout=5)
        data = resp.json()
        symbols = data.get("symbols", [])
        crypto_set = set()
        for sym in symbols:
            if sym.get("quoteAsset") == "USDT":
                crypto_set.add(sym.get("baseAsset"))
        crypto_list = sorted(list(crypto_set))
        text = "üíπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–ø–∞—Ä—ã —Å USDT):</b>\n\n"
        for c in crypto_list:
            name = crypto_info.get(c, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += f"‚Ä¢ {c} ‚Äî {name}\n"
        await tracked_reply(update, text, parse_mode="HTML")
    except Exception as e:
        await tracked_reply(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /listfiat ‚Äì –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
async def list_available_fiat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üíπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n\n"
    for code, name in sorted(fiat_info.items()):
        text += f"‚Ä¢ {code} ‚Äî {name}\n"
    await tracked_reply(update, text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /compare ‚Äì –≤—ã–≤–æ–¥ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏
async def compare_crypto_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        crypto = context.args[0].upper()
    except:
        return await tracked_reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compare <–ö–æ–¥> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /compare BTC)", parse_mode="HTML")
    results = {}
    sources = ["BINANCE", "GATEIO", "BYBIT"]
    for source in sources:
        try:
            price = get_crypto_price_api(crypto, source)
            results[source] = price
        except Exception as e:
            results[source] = None
    text = f"üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {crypto}:</b>\n\n"
    valid_prices = {}
    for source, price in results.items():
        if price is not None:
            valid_prices[source] = price
            text += f"‚Ä¢ {source}: {price:,.2f} USD\n"
        else:
            text += f"‚Ä¢ {source}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    if valid_prices:
        max_price = max(valid_prices.values())
        min_price = min(valid_prices.values())
        diff = max_price - min_price
        pct = (diff / min_price * 100) if min_price != 0 else 0
        text += f"\n–†–∞–∑–Ω–∏—Ü–∞: {diff:,.2f} USD ({pct:+.2f}%)"
    else:
        text += "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
    await tracked_reply(update, text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /trend ‚Äì –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏: m, h, d, mo, y
async def trend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        code = context.args[0].upper()
    except:
        return await tracked_reply(update,
                                   "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trend <–ö–æ–¥> [–ü–µ—Ä–∏–æ–¥] (–Ω–∞–ø—Ä–∏–º–µ—Ä, /trend BTC 24h –∏–ª–∏ /trend EUR 1y)",
                                   parse_mode="HTML")
    if len(context.args) > 1:
        period_arg = context.args[1]
        num_part = ''.join(filter(str.isdigit, period_arg))
        unit_part = ''.join(filter(str.isalpha, period_arg)).lower()
        period_value = int(num_part) if num_part else 0
        if unit_part in {"m", "min"}:
            time_unit = "minutes"
        elif unit_part == "h":
            time_unit = "hours"
        elif unit_part == "d":
            time_unit = "days"
        elif unit_part in {"mo", "month", "months"}:
            time_unit = "months"
        elif unit_part in {"y", "year", "years"}:
            time_unit = "years"
        else:
            time_unit = "days"
    else:
        if code in crypto_info:
            period_value, time_unit = 24, "hours"
        elif code in fiat_info:
            period_value, time_unit = 30, "days"
        else:
            return await tracked_reply(update, f"‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∞ {code}", parse_mode="HTML")
    processing_msg = await tracked_reply(update,
                                         f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {code} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_value} {time_unit}...",
                                         parse_mode="HTML")
    if code in crypto_info:
        settings = load_user_settings(update.effective_user.id)
        source = settings.get("data_source", "BINANCE")
        if source == "BINANCE":
            if time_unit in {"minutes", "hours"} and ((time_unit == "minutes" and period_value < 60 * 48) or (
                    time_unit == "hours" and period_value < 48)):
                interval = "1m" if time_unit == "minutes" else "1h"
                limit = period_value
            else:
                interval = "1d"
                if time_unit == "days":
                    limit = period_value
                elif time_unit == "months":
                    limit = period_value * 30
                elif time_unit == "years":
                    limit = period_value * 365
                else:
                    limit = period_value
            url = f"https://api.binance.com/api/v3/klines?symbol={code}USDT&interval={interval}&limit={limit}"
            data = session.get(url, timeout=5).json()
            if not data or not isinstance(data, list):
                return await processing_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", parse_mode="HTML")
            date_format = '%H:%M' if interval in {"1m", "1h"} else '%d-%m'
            dates = [datetime.fromtimestamp(entry[0] / 1000).strftime(date_format) for entry in data]
            prices = [float(entry[4]) for entry in data]
        elif source in {"GATEIO", "BYBIT"}:
            interval = "1d"
            if time_unit in {"days", "months", "years"}:
                if time_unit == "days":
                    limit = period_value
                elif time_unit == "months":
                    limit = period_value * 30
                elif time_unit == "years":
                    limit = period_value * 365
                else:
                    limit = period_value
            else:
                limit = 24
            url = f"https://api.binance.com/api/v3/klines?symbol={code}USDT&interval={interval}&limit={limit}"
            data = session.get(url, timeout=5).json()
            dates = [datetime.fromtimestamp(entry[0] / 1000).strftime('%d-%m') for entry in data]
            prices = [float(entry[4]) for entry in data]
        pct_change = ((prices[-1] - prices[0]) / prices[0]) * 100
        caption = f"üìà {code} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_value} {time_unit}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {pct_change:+.2f}%\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    elif code in fiat_info:
        if time_unit in {"minutes", "hours"}:
            days = 1
        elif time_unit == "days":
            days = period_value
        elif time_unit == "months":
            days = period_value * 30
        elif time_unit == "years":
            days = period_value * 365
        else:
            days = period_value
        end_date = datetime.today()
        start_date = end_date - timedelta(days=days - 1)
        start_str = start_date.strftime('%Y-%m-%d')
        end_str = end_date.strftime('%Y-%m-%d')
        default = load_user_settings(update.effective_user.id)['default_currency']
        url = f"https://api.exchangerate.host/timeseries?start_date={start_str}&end_date={end_str}&base={code}&symbols={default}"
        data_json = session.get(url, timeout=5).json()
        rates = data_json.get("rates", {})
        if not rates:
            return await processing_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", parse_mode="HTML")
        sorted_dates = sorted(rates.keys())
        dates = [datetime.strptime(d, '%Y-%m-%d').strftime('%d-%m') for d in sorted_dates]
        prices = [rates[d][default] for d in sorted_dates]
        pct_change = ((prices[-1] - prices[0]) / prices[0]) * 100
        caption = f"üìà {code} ‚Üí {default} –∑–∞ {days} –¥–Ω.\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {pct_change:+.2f}%\n–ò—Å—Ç–æ—á–Ω–∏–∫: exchangerate.host"
    else:
        return await processing_msg.edit_text(f"‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∞ {code}", parse_mode="HTML")
    x = np.arange(len(prices))
    slope, intercept = np.polyfit(x, prices, 1)
    trend_line = slope * x + intercept
    plt.figure(figsize=(10, 6))
    plt.plot(x, prices, marker='o', linestyle='-', color='blue', label='–¶–µ–Ω–∞')
    plt.plot(x, trend_line, color='red', linestyle='--', linewidth=2, label='–¢—Ä–µ–Ω–¥')
    plt.plot(x[-1], trend_line[-1], 'ro', markersize=5)
    plt.title(f"{code} ‚Äì —Ç—Ä–µ–Ω–¥")
    plt.xlabel("–í—Ä–µ–º—è")
    ylabel = "–¶–µ–Ω–∞ (USDT)" if code in crypto_info else f"–¶–µ–Ω–∞ ({default})"
    plt.ylabel(ylabel)
    plt.legend()
    plt.grid(True)
    if len(x) > 12:
        indices = np.linspace(0, len(x) - 1, num=12, dtype=int)
        plt.xticks(indices, [dates[i] for i in indices], rotation=45)
    else:
        plt.xticks(x, dates, rotation=45)
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    try:
        await processing_msg.edit_media(media=InputMediaPhoto(media=buf, caption=caption, parse_mode="HTML"))
    except Exception as e:
        target = get_reply_target(update)
        if target:
            await target.reply_photo(photo=buf, caption=caption, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        pair = context.args[0].upper()
        db_execute('INSERT OR IGNORE INTO subscriptions (user_id, pair) VALUES (?, ?)',
                   (update.effective_user.id, pair))
        await tracked_reply(update, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞", parse_mode="HTML")
    except:
        await tracked_reply(update, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /subscribe <–ü–∞—Ä–∞>")


async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subs = db_fetchall('SELECT pair FROM subscriptions WHERE user_id = ?', (update.effective_user.id,))
    text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join([f"‚Ä¢ {s[0]}" for s in subs]) if subs else "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
    await tracked_reply(update, text)


async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in bot_messages:
        for msg_id in bot_messages[chat_id]:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except:
                pass
        bot_messages[chat_id] = []
    await tracked_reply(update, "üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    if data.startswith("crypto_"):
        await convert_crypto_command(update, context, data.split("_")[1],
                                     load_user_settings(user_id)["default_currency"])
    elif data.startswith("fiat_"):
        await convert_fiat_command(update, context, data.split("_")[1])
    elif data == "toggle_notifications":
        settings = load_user_settings(user_id)
        settings["notifications"] = not settings["notifications"]
        save_user_settings(user_id, settings)
        status = "–í–ö–õ" if settings["notifications"] else "–í–´–ö–õ"
        await query.edit_message_text(f"‚öôÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}")
    elif data == "change_default_currency":
        inline_kb = InlineKeyboardMarkup([[
            InlineKeyboardButton(c, callback_data=f"set_default_{c}") for c in ["USD", "EUR", "RUB", "GBP"]
        ]])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", reply_markup=inline_kb)
    elif data.startswith("set_default_"):
        new_currency = data.split("_")[2]
        settings = load_user_settings(user_id)
        settings["default_currency"] = new_currency
        save_user_settings(user_id, settings)
        await query.edit_message_text(f"‚úÖ –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {new_currency}")
    elif data == "change_data_source":
        inline_kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("BINANCE", callback_data="set_source_BINANCE"),
            InlineKeyboardButton("GATEIO", callback_data="set_source_GATEIO"),
            InlineKeyboardButton("BYBIT", callback_data="set_source_BYBIT")
        ]])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:", reply_markup=inline_kb)
    elif data.startswith("set_source_"):
        new_source = data.split("_")[2]
        settings = load_user_settings(user_id)
        settings["data_source"] = new_source
        save_user_settings(user_id, settings)
        await query.edit_message_text(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {new_source}")
    elif data in ["show_rates_fiat", "show_rates_crypto"]:
        if "fiat" in data:
            await handle_show_rates_fiat(update, context)
        else:
            await handle_show_rates_crypto(update, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", parse_mode="HTML")


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper()
    if text in fiat_info or text in crypto_info:
        if text in crypto_info:
            await convert_crypto_command(update, context, text,
                                         load_user_settings(update.effective_user.id)["default_currency"])
        else:
            await convert_fiat_command(update, context, text)
    elif text == 'üîÑ –ö–û–ù–í–ï–†–¢–ï–†':
        await tracked_reply(update, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n–ü—Ä–∏–º–µ—Ä: BTC –∏–ª–∏ USD")
    elif text == 'üí∞ –ü–û–ü–£–õ–Ø–†–ù–´–ï –í–ê–õ–Æ–¢–´':
        await popular_currencies_initial(update, context)
    elif text == 'üíµ –ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´':
        await popular_cryptocurrencies_initial(update, context)
    elif text == '‚ùì –ü–û–ú–û–©–¨':
        await help_command(update, context)
    elif text == '‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò':
        await settings_command(update, context)
    elif text == 'üìä –ü–û–î–ü–ò–°–ö–ò':
        await show_subscriptions(update, context)
    elif text == 'üóë –û–ß–ò–°–¢–ò–¢–¨ –ß–ê–¢':
        await clear_history(update, context)
    elif text == '/LISTCRYPTO':
        await list_available_crypto(update, context)
    elif text == '/LISTFIAT':
        await list_available_fiat(update, context)
    elif text.startswith('/COMPARE'):
        await compare_crypto_prices(update, context)
    else:
        await tracked_reply(update, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help", parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await tracked_reply(update,
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                        reply_markup=ReplyKeyboardMarkup(KEYBOARD, resize_keyboard=True))


# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äì –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /convert <code>–ö–æ–¥</code> [<code>–¶–µ–ª–µ–≤–∞—è</code>] ‚Äì –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
‚Ä¢ /subscribe <code>–ü–∞—Ä–∞</code> ‚Äì –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /subscriptions ‚Äì –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ /trend <code>–ö–æ–¥</code> [<code>–ü–µ—Ä–∏–æ–¥</code>] ‚Äì –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ 
      (–ü–µ—Ä–∏–æ–¥ –∑–∞–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –µ–¥–∏–Ω–∏—Ü–µ–π: m ‚Äì –º–∏–Ω—É—Ç—ã, h ‚Äì —á–∞—Å—ã, d ‚Äì –¥–Ω–∏, mo ‚Äì –º–µ—Å—è—Ü—ã, y ‚Äì –≥–æ–¥—ã)
      –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω—å—à–µ 48 —á–∞—Å–æ–≤ ‚Äì –ø–æ—á–∞—Å–æ–≤–æ–π, –∏–Ω–∞—á–µ ‚Äì –¥–Ω–µ–≤–Ω–æ–π.
      –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥.
‚Ä¢ /check <code>–ö–æ–¥</code> ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–µ
‚Ä¢ /listcrypto ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –±–∏—Ä–∂–µ
‚Ä¢ /listfiat ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
‚Ä¢ /compare <code>–ö–æ–¥</code> ‚Äì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
‚Ä¢ /settings ‚Äì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö)
‚Ä¢ /clear ‚Äì –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ /convert BTC
‚Ä¢ /convert BTC RUB
‚Ä¢ /subscribe BTCUSDT
‚Ä¢ /trend ETH 48h
‚Ä¢ /trend EUR 1y
‚Ä¢ /check USD
‚Ä¢ /listcrypto
‚Ä¢ /listfiat
‚Ä¢ /compare BTC
    """
    await tracked_reply(update, help_text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /settings ‚Äì –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤–∞–ª—é—Ç—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    settings = load_user_settings(update.effective_user.id)
    status = "–í–ö–õ" if settings["notifications"] else "–í–´–ö–õ"
    text = (f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}\n"
            f"–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings['default_currency']}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {settings.get('data_source', 'BINANCE')}")
    inline_kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="toggle_notifications")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="change_default_currency")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", callback_data="change_data_source")]
    ])
    await tracked_reply(update, text, reply_markup=inline_kb, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        pair = context.args[0].upper()
        db_execute('INSERT OR IGNORE INTO subscriptions (user_id, pair) VALUES (?, ?)',
                   (update.effective_user.id, pair))
        await tracked_reply(update, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞", parse_mode="HTML")
    except:
        await tracked_reply(update, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /subscribe <–ü–∞—Ä–∞>")


# –ö–æ–º–∞–Ω–¥–∞ /subscriptions
async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subs = db_fetchall('SELECT pair FROM subscriptions WHERE user_id = ?', (update.effective_user.id,))
    text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join([f"‚Ä¢ {s[0]}" for s in subs]) if subs else "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
    await tracked_reply(update, text)


# –ö–æ–º–∞–Ω–¥–∞ /clear
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in bot_messages:
        for msg_id in bot_messages[chat_id]:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except:
                pass
        bot_messages[chat_id] = []
    await tracked_reply(update, "üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


# –ü–æ—Å—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
async def post_init(application: Application):
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("convert", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞—Ä—É"),
        BotCommand("trend", "–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞"),
        BotCommand("check", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–µ"),
        BotCommand("listcrypto", "–°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"),
        BotCommand("listfiat", "–°–ø–∏—Å–æ–∫ —Ñ–∏–∞—Ç–æ–≤"),
        BotCommand("compare", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"),
        BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
    ]
    await application.bot.set_my_commands(commands)


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder() \
        .token(BOT_TOKEN) \
        .post_init(post_init) \
        .build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('convert', convert_command))
    application.add_handler(CommandHandler('check', check_command))
    application.add_handler(CommandHandler('trend', trend_command))
    application.add_handler(CommandHandler('subscribe', subscribe))
    application.add_handler(CommandHandler('subscriptions', show_subscriptions))
    application.add_handler(CommandHandler('settings', settings_command))
    application.add_handler(CommandHandler('clear', clear_history))
    application.add_handler(CommandHandler('listcrypto', list_available_crypto))
    application.add_handler(CommandHandler('listfiat', list_available_fiat))
    application.add_handler(CommandHandler('compare', compare_crypto_prices))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

async def popular_currencies_initial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ–∏–∞—Ç–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton("USD", callback_data="fiat_USD"),
         InlineKeyboardButton("EUR", callback_data="fiat_EUR")],
        [InlineKeyboardButton("GBP", callback_data="fiat_GBP"),
         InlineKeyboardButton("JPY", callback_data="fiat_JPY")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã", callback_data="show_rates_fiat")]
    ]
    await tracked_reply(update, "üí∞ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:",
                        reply_markup=InlineKeyboardMarkup(buttons))


async def popular_cryptocurrencies_initial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton("BTC", callback_data="crypto_BTC"),
         InlineKeyboardButton("ETH", callback_data="crypto_ETH")],
        [InlineKeyboardButton("DOGE", callback_data="crypto_DOGE"),
         InlineKeyboardButton("BNB", callback_data="crypto_BNB")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã", callback_data="show_rates_crypto")]
    ]
    await tracked_reply(update, "üíµ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:",
                        reply_markup=InlineKeyboardMarkup(buttons))


async def handle_show_rates_fiat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    try:
        text = "üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç:\n\n"
        for code in ["USD", "EUR", "GBP", "JPY", "CNY"]:
            rate = convert_fiat_value(1, code, "RUB")
            text += f"‚Ä¢ 1 {code} = {rate:.2f} RUB\n"
        await update.callback_query.edit_message_text(text)
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def handle_show_rates_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        user_id = update.effective_user.id
        settings = load_user_settings(user_id)
        text = "üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"

        for code in ["BTC", "ETH", "BNB", "DOGE", "XRP"]:
            try:
                price = get_crypto_price_api(code, settings["data_source"])
                text += f"‚Ä¢ 1 {code} = {price:,.2f} USD\n"
            except:
                text += f"‚Ä¢ {code}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        await update.callback_query.edit_message_text(text)
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    main()
